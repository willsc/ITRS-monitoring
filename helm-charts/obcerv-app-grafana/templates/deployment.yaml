apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "obcerv-app-grafana.fullname" . }}
  labels:
    {{- include "obcerv-app-grafana.labels" . | nindent 4 }}
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      {{- include "obcerv-app-grafana.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      annotations:
    {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
    {{- end }}
    {{- if eq .Values.internal.mesh.enabled true }}
      {{- with .Values.internal.mesh.annotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
      labels:
        {{- include "obcerv-app-grafana.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
      - name: {{ .Chart.Name }}
        securityContext:
          {{- toYaml .Values.securityContext | nindent 12 }}
        image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        ports:
        - name: http
          containerPort: {{ .Values.containerPort }}
          protocol: TCP
        env:
        - name: GF_PATHS_DATA
          value: /var/db/grafana
        - name: IAM_AUTHENTICATION_URL
          value: {{ .Values.internal.iam.scheme }}://{{ .Values.internal.iam.host }}:{{ .Values.internal.iam.port }}
        - name: IAM_REALM
          value: {{ .Values.internal.iam.realm }}
        - name: IAM_DISABLE_TRUST_MANAGER
          value: {{ .Values.internal.iam.disableTrustManager | quote }}
        - name: IAM_PUBLIC_CLIENT
          value: {{ .Values.internal.iam.publicClient | quote }}
        - name: IAM_CLIENT_ID
          value: {{ .Values.internal.iam.clientName }}
        - name: IAM_CLIENT_SECRET
          valueFrom:
            secretKeyRef:
              name: {{ .Values.internal.iam.clientSecret }}
              key: client-secret
        - name: ROOT_URL
          value: {{ .Values.externalScheme }}://{{ .Values.externalHostname}}/grafana
        volumeMounts:
        - name: {{ include "obcerv-app-grafana.fullname" . }}-persistence
          mountPath: /var/db/grafana
        - name: datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        readinessProbe:
          httpGet:
            path: /api/health
            port: http
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 6
        livenessProbe:
          httpGet:
            path: /api/health
            port: http
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        resources:
          {{- toYaml .Values.resources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      volumes:
      - name: datasources
        configMap:
          name: {{ include "obcerv-app-grafana.fullname" . }}
      - name: dashboards
        configMap:
          name: {{ include "obcerv-app-grafana.fullname" . }}-dashboards
      - name: {{ include "obcerv-app-grafana.fullname" . }}-persistence
        persistentVolumeClaim:
          {{- if .Values.persistence.existingClaim }}
          claimName: {{ .Values.persistence.existingClaim }}
          {{- else }}
          claimName: {{ include "obcerv-app-grafana.fullname" . }}
          {{- end }}