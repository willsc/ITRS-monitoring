You have installed {{ .Chart.Name }} as a release named {{ .Release.Name }}.

To learn more about the release, try:

  $ helm status {{ .Release.Name }}
  $ helm get all {{ .Release.Name }}

PERSISTENCE:
{{- if .Values.persistence.existingClaim }}
You have configured Grafana to use an existing PersistentVolumeClaim: {{ .Values.persistence.existingClaim }}
{{- else }}
Grafana configuration and dashboards will be persisted via the PersistentVolumeClaim "{{ include "obcerv-app-grafana.fullname" . }}".

Helm will not delete this PVC if you uninstall this release.  This allows for reinstalling
the chart and keeping your existing data - however you must use the same release name "{{ .Release.Name }}".

If you do not wish keep any data, you must manually delete the PVC.
{{- end }}

DASHBOARDS FROM PROVISION:
{{- $dashboards := .Values.dashboards | default "" }}
{{- if $dashboards}}
  {{- range $dashboards  }}
    {{- range $key, $value := .  }}
      {{ $key }}
    {{- end }}
  {{- end }}
{{- else }}
No dashboards
{{- end }}

ACCESSING GRAFANA:
{{- if .Values.ingress.enabled }}
  {{- if .Values.ingress.tls.enabled }}
  https://{{ .Values.externalHostname | trim }}/grafana
  {{- else }}
  http://{{ .Values.externalHostname | trim }}/grafana
  {{- end }}
{{- else if contains "NodePort" .Values.service.type }}
  export NODE_PORT=$(kubectl get --namespace {{ .Release.Namespace }} -o jsonpath="{.spec.ports[0].nodePort}" services {{ include "obcerv-app-grafana.fullname" . }})
  export NODE_IP=$(kubectl get nodes --namespace {{ .Release.Namespace }} -o jsonpath="{.items[0].status.addresses[0].address}")
  echo http://$NODE_IP:$NODE_PORT
{{- else if contains "LoadBalancer" .Values.service.type }}
  export SERVICE_IP=$(kubectl get svc --namespace {{ .Release.Namespace }} {{ include "obcerv-app-grafana.fullname" . }} --template "{{"{{ range (index .status.loadBalancer.ingress 0) }}{{.}}{{ end }}"}}")
  echo http://$SERVICE_IP:{{ .Values.service.port }}
  NOTE: It may take a few minutes for the LoadBalancer IP to be available.
        You can watch the status of by running 'kubectl get --namespace {{ .Release.Namespace }} svc -w {{ include "obcerv-app-grafana.fullname" . }}'
{{- else if contains "ClusterIP" .Values.service.type }}
  export POD_NAME=$(kubectl get pods --namespace {{ .Release.Namespace }} -l "app.kubernetes.io/name={{ include "obcerv-app-grafana.name" . }},app.kubernetes.io/instance={{ .Release.Name }}" -o jsonpath="{.items[0].metadata.name}")
  echo "Visit http://127.0.0.1:8080 to use your application"
  kubectl --namespace {{ .Release.Namespace }} port-forward $POD_NAME 8080:80
{{- end }}

  Note: The application might not be immediately accessible. Wait for the pod to become "ready" before connecting.
