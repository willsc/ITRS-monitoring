{{- $kubeLogCollectionEnabled := false }}
{{- $otelLogCollectionEnabled := false }}
{{- $fluentdLogCollectionEnabled := false }}
{{- $logCollectionEnabled := false }}
{{- $daemonSetMode := false }}
{{- $outboundLogRouting := false }}
{{- $inboundRouting := false }}
{{- if eq .Values.mode "DaemonSet" }}
{{- $daemonSetMode = true }}
{{- end }}
{{- if and $daemonSetMode .Values.logs.enabled .Values.persistence.enabled }}
{{- $kubeLogCollectionEnabled = true }}
{{- end }}
{{- if and .Values.opentelemetry.enabled .Values.persistence.enabled }}
{{- $otelLogCollectionEnabled = true }}
{{- end }}
{{- if and .Values.fluentd.enabled .Values.persistence.enabled }}
{{- $fluentdLogCollectionEnabled = true }}
{{- end }}
{{- if or $kubeLogCollectionEnabled $otelLogCollectionEnabled $fluentdLogCollectionEnabled }}
{{- $logCollectionEnabled = true }}
{{- end }}
{{- if .Values.routing.outbound.enabled }}
{{- range $i, $profile := .Values.routing.outbound.profiles }}
{{- if has "logs" $profile.pipelines }}
{{- $outboundLogRouting = true }}
{{- end }}
{{- end }}
{{- end }}
{{- if .Values.routing.inbound.enabled }}
{{- $inboundRouting = true }}
{{- end }}
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ include "netprobe.fullname" . }}
data:
  config.yaml: |-
    plugin-directory: ./plugins
    monitoring:
      self-metrics:
        enabled: {{ .Values.agent.selfMetrics.enabled }}
        dimensions:
          {{- range $k, $v := .Values.agent.selfMetrics.customDimensions }}
          {{ toYaml $v }}
          {{- end }}
          {{- range $k, $v := .Values.customDimensions }}
          {{ toYaml $v }}
          {{- end }}
    reporters:
    - name: tcp
      type: tcp
      port: {{ .Values.netprobe.reporterPort }}
    {{- if and $logCollectionEnabled $outboundLogRouting }}
    {{- range $i, $profile := .Values.routing.outbound.profiles }}
    {{- range $j, $route := $profile.routes }}
    - name: "grpc-{{ $route.target.grpc.hostname }}"
      type: plugin
      class-name: GrpcInternalIngestionServiceReporter
      hostname: {{ required "routing.outbound.profiles.routes.target.grpc.hostname is required" $route.target.grpc.hostname }}
      port: {{ $route.target.grpc.port }}
      use-plain-text: true
      logs-batch:
        size: 50
        timeout: 100
        max-retries: -1
        retry-interval: 30000
      store-and-forward:
        directory: /var/lib/geneos/collection-agent
    {{- end }}
    {{- end }}
    {{- range $i, $profile := .Values.routing.outbound.profiles }}
    - name: router{{ $i }}
      type: routing
      route-type: {{ $profile.routeType }}
      routes:
      {{- range $j, $route := $profile.routes }}
      - reporter: "grpc-{{ $route.target.grpc.hostname }}"
        match: {{ $route.match }}
        matchers:
        {{- toYaml $route.matchers | nindent 8 }}
      {{- end }}
      {{- /* Implicit catch-all to send all unmatched data points to the TCP reporter of this instance. */}}
      - reporter: tcp
        match: any
        matchers:
        - type: name
          pattern: .*
    {{- end }}
    {{- end }}
    collectors:
    {{- if .Values.metrics.enabled }}
    {{- if .Values.statsd.enabled }}
    - name: statsd
      type: plugin
      class-name: StatsdServer
      stale-metrics-threshold: {{ .Values.statsd.staleThreshold | int }}
      transport-protocol: {{ .Values.statsd.protocol }}
      listen-port: {{ .Values.statsd.port }}
      processors:
      {{ include "netprobe.collectorEnrichmentProcessors" . | nindent 6 | trim }}
    {{- end }}
    - name: kube-metrics
      type: plugin
      class-name: KubernetesMetricsCollector
      exclude-non-namespaced: {{ .Values.metrics.excludeNonNamespaced }}
      {{- if .Values.namespaces }}
      namespaces:
      {{- $root := . }}
      {{- range $k, $v := .Values.namespaces }}
      - {{ tpl $v $root | quote }}
      {{- end }}
      {{- end }}
      processors:
      {{ include "netprobe.collectorEnrichmentProcessors" . | nindent 6 | trim }}
      {{- if $daemonSetMode }}
      {{- /*
        Only forward data points related to this node.  This is due to netprobe limitation
        where two netprobes cannot report for the same managed entity.
        Metrics/Events/Attrributes that are not specific to a node are handled by the kube-metrics deployment.
      */}}
      - type: forward-filter
        matchers:
        - type: dimension
          key: node
          value: ${env:NODE_NAME}
      {{- end }}
    {{- end }}
    {{- if $kubeLogCollectionEnabled }}
    - name: kube-logs
      type: plugin
      class-name: KubernetesLogCollector
      log-directory: /var/log/containers
      persistence-directory: /var/lib/geneos/collection-agent/log-collector
      read-from-beginning: {{ .Values.logs.readFromBeginning }}
      {{- if .Values.namespaces }}
      namespaces:
      {{- $root := . }}
      {{- range $k, $v := .Values.namespaces }}
        - {{ tpl $v $root | quote }}
      {{- end }}
      {{- end }}
      processors:
      {{ include "netprobe.collectorEnrichmentProcessors" . | nindent 6 | trim }}
      {{- /*
        Only forward data points related to this node.  This is due to netprobe limitation
        where two netprobes cannot report for the same managed entity.
        Metrics/Events/Attributes that are not specific to a node are handled by the kube-metrics deployment.
      */}}
      - type: forward-filter
        matchers:
        - type: dimension
          key: node
          value: ${env:NODE_NAME}
    {{- end }}
    {{- if .Values.opentelemetry.enabled }}
    - name: opentelemetry
      type: plugin
      class-name: OpenTelemetryCollector
      port: {{ .Values.opentelemetry.port | int }}
      queue-capacity: {{ .Values.opentelemetry.queueCapacity | int }}
      thread-pool-size: {{ .Values.opentelemetry.threadPoolSize | int }}
      {{- if .Values.opentelemetry.tls.enabled }}
      tls:
        cert-file: /secrets/otel/tls.crt
        key-file: /secrets/otel/tls.key
        {{- if .Values.opentelemetry.tls.caSecret }}
        trust-chain-file: /secrets/otel-mtls/{{ required "caSecretKey must be configured" .Values.opentelemetry.tls.caSecretKey }}
        {{- end }}
        {{- with .Values.opentelemetry.tls.protocols }}
        protocols:
        {{- toYaml . | nindent 8 }}
        {{- end }} 
      {{- end }}
      emit-trace-metrics: {{ .Values.opentelemetry.emitTraceMetrics }}
      trace-metrics-interval: {{ .Values.opentelemetry.traceMetricsInterval | int }}
      trace-metrics-expiry: {{ .Values.opentelemetry.traceMetricsExpiry | int }}
      max-attribute-key-value-length: {{ .Values.opentelemetry.maxAttributeKeyValueLength | int }}
      {{- with .Values.opentelemetry.resourceAttributes }}
      resource-attributes: {{ toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.opentelemetry.scopeAttributes }}
      scope-attributes: {{ toYaml . | nindent 8 }}
      {{- end }}

      {{- with .Values.opentelemetry.units }}
      units: {{ toYaml . | nindent 8 }}
      {{- end }}
    {{- end }}
    {{- if .Values.fluentd.enabled }}
    - name: fluentd
      type: plugin
      class-name: FluentdForwardCollector
      port: {{ required "fluentd port must be configured" .Values.fluentd.port | int }}
      acceptor-thread-pool-size: {{ .Values.fluentd.acceptorThreadPoolSize | int }}
      worker-thread-pool-size: {{ .Values.fluentd.workerThreadPoolSize | int }}
      {{- if .Values.fluentd.tls.enabled }}
      tls-config:
        cert-file: /secrets/fluentd/tls.crt
        key-file: /secrets/fluentd/tls.key
        {{- if .Values.fluentd.tls.caSecret }}
        trust-chain-file: /secrets/fluentd-mtls/{{ required "caSecretKey must be configured" .Values.fluentd.tls.caSecretKey }}
        {{- end }}
      {{- end }}
      name-key: {{ required "fluentd nameKey must be configured" .Values.fluentd.nameKey }}
      tag-mapping: {{ .Values.fluentd.tagMapping }}
      message-key: {{ .Values.fluentd.messageKey }}
      dimensions:
      {{- range $k, $v := .Values.fluentd.dimensions }}
      {{ toYaml $v | indent 2 }}
      {{- end }}
      severity-mapping:
        key: {{ .Values.fluentd.severityMapping.key }}
        values:
        {{- range $k, $v := .Values.fluentd.severityMapping.values }}
        {{ toYaml $v | indent 2 }}
        {{- end }}
    {{- end }}
    {{- if and (not $daemonSetMode) .Values.routing.inbound.enabled }}
    - name: grpc
      type: plugin
      class-name: GrpcInternalIngestionServiceCollector
      port: 7264
      {{- /* It is critical to avoid enriching data points coming from this collector. */}}
    {{- end }}
    workflow:
    {{- if or $kubeLogCollectionEnabled (and .Values.persistence.enabled (not .Values.agent.disableStorePersistence)) }}
      store-directory: /var/lib/geneos/collection-agent
      {{- end }}
      metrics:
        reporter: tcp
        store:
          type: memory
          capacity: {{ .Values.agent.metricsQueueSize }}
        processors:
        - type: plugin
          name: geneos-workflow
          class-name: GeneosProcessor
      events:
        reporter: tcp
        store:
          {{- if and ($daemonSetMode) (.Values.persistence.enabled) (not .Values.agent.disableStorePersistence) }}
          type: disk
          {{- else }}
          type: memory
          capacity: {{ .Values.agent.eventsQueueSize }}
          {{- end }}
      attributes:
        reporter: tcp
        store:
          type: memory
          capacity: {{ .Values.agent.attributesQueueSize }}
      traces:
        enabled: false
      logs:
        {{- if or $logCollectionEnabled $inboundRouting }}
        {{- if $outboundLogRouting }}
        {{- $found := false }}
        {{- range $i, $profile := .Values.routing.outbound.profiles }}
        {{- if and (has "logs" $profile.pipelines) (not $found) }}
        {{- $found = true }}
        reporter: router{{ $i }}
        {{- end }}
        {{- end }}
        {{- else }}
        reporter: tcp
        {{- end }}
        store:
        {{- if not .Values.agent.disableStorePersistence }}
          type: disk
        {{- else }}
          type: memory
          capacity: {{ .Values.agent.logsQueueSize }}
        {{- end }}
        {{- else }}
        enabled: false
        {{- end }}

  logback.xml: |-
    <configuration>
      <appender name="stdout" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
          <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger - %msg%n</pattern>
        </encoder>
      </appender>
      {{- range $k, $v := .Values.agent.logging.loggers }}
      <logger name="{{ $k }}" level="{{ $v }}" />
      {{- end }}
      <root level="{{ .Values.agent.logging.rootLevel }}">
        <appender-ref ref="stdout" />
      </root>
    </configuration>

  config.xml: |-
    <netprobe compatibility="1"
              xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
              xsi:noNamespaceSchemaLocation="http://schema.itrsgroup.com/GA2011.2-110303/netprobe.xsd">
      <selfAnnounce>
        <enabled>true</enabled>
        <retryInterval>{{ .Values.netprobe.retryInterval }}</retryInterval>
        <requireReverseConnection>{{ .Values.netprobe.requireReverseConnection }}</requireReverseConnection>
        {{- if $daemonSetMode }}
        <probeName>{{ .Values.daemonSet.probeName }}</probeName>
        {{- else }}
        <probeName>{{ .Values.deployment.probeName }}</probeName>
        {{- end }}
        <managedEntities>
            {{- range $k, $v := .Values.managedEntities }}
            {{- if and $daemonSetMode (eq $v.target "clusterLevelProbe") }}
            {{- else if or (not $daemonSetMode) (eq $v.target "allProbes") (eq $v.target "nodeLevelProbes") }}
            <managedEntity>
              <name>{{ required "Managed entity name must be configured" $v.name }}</name>
              <attributes>
                {{- range $kAttr, $vAttr := $v.attributes }}
                <attribute name="{{ $kAttr }}">{{ $vAttr }}</attribute>
                {{- end }}
              </attributes>
              <types>
                {{- range $v.types }}
                <type>{{ . }}</type>
                {{- end }}
              </types>
            </managedEntity>
            {{- end }}
            {{- end }}
        </managedEntities>
        <dynamicEntities>
          {{- range $k, $v := .Values.dynamicEntities.mappingTypes }}
          <mappingType>{{ $v }}</mappingType>
          {{- end }}
          <collectionAgentParameters>{{ .Values.netprobe.collectionAgentParameters }}</collectionAgentParameters>
        </dynamicEntities>
        <gateways>
          {{- range $k, $v := .Values.gateways }}
          <gateway>
            <hostname>{{ required "Gateway hostname must be configured" $v.host }}</hostname>
            <port>{{ $v.port }}</port>
            <secure>{{ $v.secure }}</secure>
          </gateway>
          {{- end }}
        </gateways>
      </selfAnnounce>
    </netprobe>
