# DNS name via which external clients will access the app's UI (required).
# Must match the externalHostname parameter set when installing the
# Web Console
externalHostname: ""

docker:
  registry: docker.itrsgroup.com

image:
  repository: /obcerv/app/obcerv-app-notifications-ui

ingress:
  path: /notifications/
env:
- name: RPC_TIMEOUT
  value: PT30S

notifier:
  image:
    repository: /obcerv/app/obcerv-app-notifications-notifier-daemon

  # Sets the interval that housekeeping on the Notification cache will be
  # performed.
  # minimum: PT1S
  # default: PT1H
  notificationHousekeepingInterval: "PT1H"

  # Sets the maximum amount of time to wait for Notification cache entries to be
  # cleared from the Obcerv Platform.
  # minimum: PT30S
  # default: PT30S
  notificationPruningTimeout: "PT30S"

  # Defines how long to wait until evicting triggered entities from the Notifier's internal
  # cache. An entity is  removed if:
  #   1) It's severity has been cleared for the supplied duration
  #   2) It has not been updated for longer than the supplied duration
  #
  # minimum: PT2H
  # default: P1D
  entityTtl: P1D
  
  # How long to wait for the Notifier daemon to shut down
  #
  # minimum: PT5S
  # default: PT30S
  shutdownTimeout: PT30S
  
  # How long to wait for the Notifier to start up
  #
  # minimum: PT5S
  # default: PT30S
  readinessTimeout: PT30S

  # The minimum amount of time between entity updates after which
  # the app assumes the snapshot part of the entity subscription
  # is done.
  #
  # minimum: PT1S
  # default: PT1S
  minEntityUpdateInterval: PT1S

  # The maximum amount of time to wait for the triggered entity
  # cache bootstrap to complete.
  #
  # minimum: PT1M
  # default: PT5M
  maxEntityBootstrapDuration: PT5M

  # How often to evaluate notifications. Should be short enough such that notifications are 
  # sent out as soon as their trigger conditions are met. Should be long enough to allow for
  # evaluation to run in a timely manner.
  #
  # minimum: PT5S
  # default: PT5S
  pollInterval: PT5S

  # Notifications are stored in chunks to optimise performance and reduce the number of
  # round trips to the platform. This setting controlls the maximum size of each chunk
  # expressed in Kibibytes.
  #
  # minimum: 128
  # maximum: 1024
  # default: 1024
  notificationCacheBufferSizeKiB: 1024

  # Notification queue settings.
  queue:
    # Queue settings for Slack notifications
    # The following queue settings are available for all
    # notification integrations but their defaults may differ.
    slack:
      # Sets the maximum number of notifications that can be held in the queue.
      # Any new notifications generated whilst the queue is full will be thrown away.
      #
      # minimum: 100
      # default: 300
      capacity: 300

      # The number of queue consumer threads. Due to Slack's rate limting
      # policies, having more than 1 thread is likely to be problematic so
      # it is recommended to keep this setting as is.
      #
      # minimum: 1
      # default: 1
      numThreads: 1
      
      # Defines how long to wait for an acknowledgement that a notification has been
      # sent.
      #
      # minimum: PT5S
      # default: PT10S
      consumerTimeout: PT10S

      # How long to wait for the queue to gracefully shut down.
      #
      # minimum: PT5S
      # default: PT30S
      shutdownTimeout: PT30S

  # Sets the maximum inbound gRPC message size in Mebibytes.
  maxInboundGrpcMessageSizeMiB: 15

iam:
  image:
    repository: /obcerv/iam-tools
    tag: "1.0.0"
    pullPolicy: IfNotPresent

internal:
  mesh:
    enabled: true
    annotations:
      linkerd.io/inject: enabled
      config.linkerd.io/proxy-cpu-request: "0.4"
      config.linkerd.io/proxy-cpu-limit: "1"
      config.linkerd.io/proxy-memory-request: 512Mi
      config.linkerd.io/proxy-memory-limit: 512Mi
